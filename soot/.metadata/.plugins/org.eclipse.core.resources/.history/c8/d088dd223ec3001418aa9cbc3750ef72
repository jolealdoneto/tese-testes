import java.util.Iterator;
import java.util.Map;

import br.com.lealdn.SootUtils;
import soot.Body;
import soot.BodyTransformer;
import soot.Local;
import soot.PackManager;
import soot.PatchingChain;
import soot.RefType;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.Transform;
import soot.Unit;
import soot.jimple.AbstractStmtSwitch;
import soot.jimple.InvokeExpr;
import soot.jimple.InvokeStmt;
import soot.jimple.Jimple;
import soot.jimple.StringConstant;
import soot.options.Options;


public class AndroidInstrument {
	
	public static void main(String[] args) {
		
		//prefer Android APK files// -src-prec apk
		Options.v().set_src_prec(Options.src_prec_apk);
		
		//output as APK, too//-f J
		Options.v().set_output_format(Options.output_format_dex);
		

        PackManager.v().getPack("jtp").add(new Transform("jtp.myInstrumenter", new BodyTransformer() {
        	private boolean done = false;

			@Override
			protected void internalTransform(final Body b, String phaseName, @SuppressWarnings("rawtypes") Map options) {
				if (done) return;

				Scene.v().loadClassAndSupport("br.com.lealdn.MainActivity");

				SootMethod sootMethod = null;
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");
				System.out.println("ENTERING");

				for (final SootClass clazz : Scene.v().getClasses()) {
					System.out.println("Checking: " + clazz);
					for (final SootMethod method : clazz.getMethods()) {
						if (SootUtils.isAnnotated(method)) {
							sootMethod = method;
						}
					}
				}

				if (sootMethod != null) {
					SootUtils.modifyMethodToOffload(sootMethod);
				}
				done = true;
			}
		}));
		
		soot.Main.main(args);
	}

    private static Local addTmpRef(Body body)
    {
        Local tmpRef = Jimple.v().newLocal("tmpRef", RefType.v("java.io.PrintStream"));
        body.getLocals().add(tmpRef);
        return tmpRef;
    }
    
    private static Local addTmpString(Body body)
    {
        Local tmpString = Jimple.v().newLocal("tmpString", RefType.v("java.lang.String")); 
        body.getLocals().add(tmpString);
        return tmpString;
    }
}
